version: '3.9'

networks:
  hr-microservice_observability_network:
    driver: bridge
  hr-microservice_app_network:
    driver: bridge
  elastic:
    driver: bridge

services:
  # ====================================================================================================================
  # PROMETHEUS
  # ====================================================================================================================
  prometheus-hr-microservice:
    image: prom/prometheus:latest
    container_name: prometheus-hr-microservice
    networks:
      - hr-microservice_observability_network
      - hr-microservice_app_network
    volumes:
      - "./observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:z"
    ports:
      - "9091:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
    user: root
    restart: unless-stopped
    profiles:
      - observability
  # ====================================================================================================================
  # REDIS
  # ====================================================================================================================
  redis:
    image: redis:latest
    container_name: redis-cache
    ports:
      - "6379:6379"
    restart: unless-stopped
    volumes:
      - redis-data:/data
    profiles:
      - database
    networks:
      - hr-microservice_observability_network
      - hr-microservice_app_network
  # ====================================================================================================================
  # REDISINSIGHT
  # ====================================================================================================================
  redisInsight:
    image: redis/redisinsight:latest
    container_name: redis-insight
    ports:
      - "5540:5540"
    restart: unless-stopped
    depends_on:
      - redis
    volumes:
      - redisinsight-data:/db
    profiles:
      - database
    networks:
      - hr-microservice_observability_network
      - hr-microservice_app_network
  # ====================================================================================================================
  # GRAFANA
  # ====================================================================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: grafana-hr-microservice
    networks:
      - hr-microservice_observability_network
      - hr-microservice_app_network
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-storage:/var/lib/grafana
    restart: unless-stopped
    depends_on:
      - prometheus-hr-microservice
    profiles:
      - observability
  # ====================================================================================================================
  # ZOOKEEPER
  # ====================================================================================================================
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"  # Porta do Zookeeper
    profiles:
      - message
    networks:
      - hr-microservice_observability_network
      - hr-microservice_app_network
  # ====================================================================================================================
  # KAFKA
  # ====================================================================================================================
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_LISTENER_NAME_INSIDE: INSIDE
      KAFKA_LISTENER_SECURITY_PROTOCOL: PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENER: OUTSIDE://localhost:9092
      KAFKA_LISTENER_PORT: 9092
      KAFKA_LISTENER_NAME_OUTSIDE: OUTSIDE
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
      - "9093:9093"
    depends_on:
      - zookeeper
    profiles:
      - message
    networks:
      - hr-microservice_observability_network
      - hr-microservice_app_network

  # ====================================================================================================================
  # KAFKA-UI
  # ====================================================================================================================
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    environment:
      KAFKA_CLUSTERS_0_NAME: "Local Kafka"
      KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS: "kafka:9093"
      KAFKA_CLUSTERS_0_ZOOKEEPER: "zookeeper:2181"
    ports:
      - "8080:8080"
    profiles:
      - message
    networks:
      - hr-microservice_observability_network
      - hr-microservice_app_network

  # ====================================================================================================================
  # Worker-DB
  # ====================================================================================================================
  worker-db:
    image: mysql:8.0
    container_name: worker-db
    environment:
      TZ: America/Sao_Paulo
      MYSQL_ROOT_PASSWORD: 1234567
      MYSQL_USER: docker
      MYSQL_PASSWORD : 1234567
      MYSQL_DATABASE: worker_service_db
      MYSQL_ROOT_HOST: '%'
      MYSQL_TCP_PORT : 3308
    ports:
      - "3308:3308"
    expose:
      - "3308"
    networks:
      - hr-microservice_observability_network
      - hr-microservice_app_network
    profiles:
      - database-mysql
    restart: unless-stopped
  # ====================================================================================================================
  # User-DB
  # ====================================================================================================================
  user-db:
    image: mysql:8.0
    container_name: user-db
    environment:
      TZ: America/Sao_Paulo
      MYSQL_ROOT_PASSWORD: 1234567
      MYSQL_USER: docker
      MYSQL_PASSWORD: 1234567
      MYSQL_DATABASE: user_service_db
      MYSQL_ROOT_HOST: '%'
      MYSQL_TCP_PORT: 3309
    ports:
      - "3309:3309"
    expose:
      - "3309"
    networks:
      - hr-microservice_observability_network
      - hr-microservice_app_network
    profiles:
      - database-mysql-user
    restart: unless-stopped

  # ====================================================================================================================
  # ZIPKIN
  # ====================================================================================================================
  zipkin:
    image: openzipkin/zipkin:latest
    container_name: zipkin
    ports:
      - "9411:9411" # Porta padrão para acesso ao Zipkin
    environment:
      - STORAGE_TYPE=mem # Configuração do armazenamento (padrão em memória)
    networks:
      - hr-microservice_observability_network
      - hr-microservice_app_network
    profiles:
      - datatrace
    restart: unless-stopped

volumes:
  grafana-storage:
  redis-data:
    driver: local
  redisinsight-data:
    driver: local



